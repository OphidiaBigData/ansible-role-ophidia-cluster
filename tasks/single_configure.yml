#################################################
# Tasks for general configuration
- name: Copy template of 'oph_submit' file
  template:
    src=oph_submit.sh.j2
    dest=/usr/local/ophidia/oph-server/etc/script/oph_submit.sh
    mode=0755
    owner={{ oph_user }}
    group={{ oph_user }}

- name: Copy template of Ophidia server server.conf
  template:
    src=server.conf.j2
    dest=/usr/local/ophidia/oph-server/etc/server.conf
    mode=0644
    owner={{ oph_user }}
    group={{ oph_user }}

- name: Copy template of Ophidia server env.php
  template:
    src=env.php.j2
    dest=/var/www/html/ophidia/env.php
    mode=0644
    owner={{ oph_user }}
    group={{ oph_user }}

- name: Copy template of Ophidia server ophidiadb.conf
  template:
    src=ophidiadb.conf.j2
    dest=/usr/local/ophidia/oph-server/etc/ophidiadb.conf
    mode=0644
    owner={{ oph_user }}
    group={{ oph_user }}

- name: Copy template of Ophidia web server conf ophidia-web.conf
  template:
    src=ophidia-web.conf.j2
    dest=/etc/httpd/conf.d/ophidia-web.conf
    mode=0644
    owner=root
    group=root

- name: Copy template of oph_configuration
  template:
    src=oph_configuration.j2
    dest=/usr/local/ophidia/oph-cluster/oph-analytics-framework/etc/oph_configuration
    mode=0644
    owner={{ oph_user }}
    group={{ oph_user }}

- name: Copy template of oph_soap_configuration
  template:
    src=oph_soap_configuration.j2
    dest=/usr/local/ophidia/oph-cluster/oph-analytics-framework/etc/oph_soap_configuration
    mode=0644
    owner={{ oph_user }}
    group={{ oph_user }}

- name: Create folder for execution scripts
  file: path={{ user_home }}/.ophidia owner={{ oph_user }} group={{ oph_user }} state=directory

# Create server certs
- include: certs.yml

#######################################################
# Tasks to setup/config mysql and necessary databases
- name: Start the MySQL service
  service: name=mysql state=started enabled=yes

- name: Wait for mysql start
  wait_for: path=/var/lib/mysql/mysql.sock

- name: Set mysql root passwd
  mysql_user: name=root password={{ ophdb_passwd }} host={{ item }}
  with_items:
    - "{{ ansible_nodename }}"
    - 127.0.0.1
    - ::1
    - localhost

- name: Copy template of .my.cnf to root
  template:
    src=my.cnf.j2
    dest=/root/.my.cnf
    mode=0600
    owner=root
    group=root

- name: Copy template of .my.cnf to oph_user
  template:
    src=my.cnf.j2
    dest=/home/{{ oph_user }}/.my.cnf
    mode=0600
    owner={{ oph_user }}
    group={{ oph_user }}

- name: Import Ophidia primitives
  mysql_db: name=mysql state=import target=/usr/local/ophidia/oph-cluster/oph-primitives/etc/create_func.sql

- name: Create Ophidia databases
  mysql_db: name={{ item }} state=present
  with_items:
    - ophidiadb
    - oph_dimensions
  register: new_ophidiadbs

- name: Import Ohidia analytics db
  mysql_db: name=ophidiadb state=import target=/usr/local/ophidia/oph-cluster/oph-analytics-framework/etc/ophidiadb.sql
  when: new_ophidiadbs.changed

- name: Copy ophdb-partition.sql file
  copy:
    src=ophdb-partition.sql
    dest=/tmp/ophdb-partition.sql
    mode=0600
    owner=root
    group=root
  when: new_ophidiadbs.changed

- name: Import ophdb-partition.sql
  mysql_db: name=ophidiadb state=import target=/tmp/ophdb-partition.sql
  when: new_ophidiadbs.changed

- name: Copy template of ophdb-host-local.sql to root
  template:
    src=ophdb-host-local.sql.j2
    dest=/tmp/ophdb-host.sql
    mode=0600
    owner=root
    group=root
  when: new_ophidiadbs.changed

- name: Import ophdb-host.sql
  mysql_db: name=ophidiadb state=import target=/tmp/ophdb-host.sql
  when: new_ophidiadbs.changed

- name: Grant Mysql privileges
  mysql_user: name=root password='{{ ophdb_passwd }}' host='{{ mysql_subnet }}' priv={{ item }}
  with_items:
    - ophidiadb.*:ALL
    - oph_dimensions.*:ALL
    - mysql.*:EXECUTE
    - db_ophidiadb_%.*:ALL

#######################################################
# Task to setup Ophidia users

- stat: path=/home/{{ oph_user }}/notebooks
  register: ophidia_user_created

- name: Update Ophidia admin user password
  shell: /usr/local/ophidia/oph-server/bin/oph_manage_user -a update -u admin -p {{ oph_account_passwd }}
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ oph_user }}"
  when: not ophidia_user_created.stat.exists

- name: Delete Ophidia default test user
  shell: $(! /usr/local/ophidia/oph-server/bin/oph_manage_user -a list | grep oph-test) || /usr/local/ophidia/oph-server/bin/oph_manage_user -a delete -u oph-test
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ oph_user }}"
  when: not ophidia_user_created.stat.exists

- name: Add Ophidia specific user
  shell: if [[ $(/usr/local/ophidia/oph-server/bin/oph_manage_user -a list | grep {{ oph_account_user }}) ]] ; then /usr/local/ophidia/oph-server/bin/oph_manage_user -a update -u {{ oph_account_user }} -p {{ oph_account_passwd }}; else /usr/local/ophidia/oph-server/bin/oph_manage_user -a add -u {{ oph_account_user }} -p {{ oph_account_passwd }} -r yes; fi
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ oph_user }}"
  when: not ophidia_user_created.stat.exists

#######################################################
# Tasks for Ophidia web and HTTPS configuration
- name: Check HTTP server SSL cert
  stat: path=/etc/pki/tls/certs/ophidia-web.crt
  register: httpserver

- name: Create HTTP server SSL cert
  command: >
    openssl req
      -x509
      -nodes
      -days 730
      -newkey rsa:2048
      -passout pass:{{ cert_passwd }}
      -subj "/CN={{ public_server_ip }} "
      -keyout /etc/pki/tls/private/ophidia-web.key
      -out /etc/pki/tls/certs/ophidia-web.crt
  args:
    creates: /etc/pki/tls/certs/ophidia-web.crt
  when: httpserver.stat.exists == False

- name: Set HTTPS server cert permission
  file:
    path: "{{ item }}"
    mode: 0600
  with_items:
    - "/etc/pki/tls/private/ophidia-web.key"
    - "/etc/pki/tls/certs/ophidia-web.crt"


#######################################################
# Setup environment variables
- name: Add oph_term variables in bashrc file
  lineinfile:
    dest: /home/{{oph_user }}/.bashrc 
    line: "{{ item.line }}"
    insertafter: 'EOF' 
    regexp: "{{ item.regexp }}"
    state: present
  with_items:
    - { line: 'export OPH_SERVER_HOST="127.0.0.1"', regexp: 'export OPH_SERVER_HOST="127.0.0.1"' }
    - { line: 'export OPH_SERVER_PORT="11732"', regexp: 'export OPH_SERVER_PORT="11732"' }
    - { line: 'export OPH_PASSWD="{{ oph_account_passwd }}"', regexp: 'export OPH_PASSWD="{{ oph_account_passwd }}"' }
    - { line: 'export OPH_USER="{{ oph_account_user }}"', regexp: 'export OPH_USER="{{ oph_account_user }}"' }
  become: yes
  become_user: "{{ oph_user }}"

#######################################################
# Task to change httpd port from 443 to 8443
- name: Replace 443 port to 8443
  replace:
    path: /etc/httpd/conf.d/ssl.conf
    regexp: '443'
    replace: '8443'

#######################################################
# Tasks to start the services
- name: Start httpd
  service: name=munge state=restarted enabled=yes

- name: Check httpd
  shell: (! pgrep httpd) || pkill httpd

- name: Start httpd
  service: name=httpd state=started enabled=yes

- name: Start sshd
  service: name=sshd state=started enabled=yes

#######################################################
# Task to start Ophidia IO service
- name: Start ophidia IO server
  shell: pgrep oph_io_server || (nohup oph_io_server -i 1 2>&1 > /dev/null &)
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ oph_user }}"

#######################################################
# Task to configure and start SLURM daemon
- name: Update slurm conf
  lineinfile:
    dest=/etc/slurm/slurm.conf
    state=present
    regexp='SlurmdPidFile=\/var\/run\/slurmctld.pid'
    line='SlurmdPidFile=\/var\/run\/slurmd.pid'

- name: Update slurm conf in case of localhost
  replace:
    path: /etc/slurm/slurm.conf
    regexp: 'localhost\[1-1\]'
    replace: 'localhost'

- name: Stop SLURM
  command: scontrol shutdown

- name: Start Slurm Controller
  command: slurmctld

- name: Start Slurm Daemon
  command: slurmd

- name: Reconfigure SLURM
  command: scontrol reconfigure

#######################################################
# Task to start Ophidia service
- name: Start ophidia server
  shell: pgrep oph_server || (nohup oph_server 2>&1 > /dev/null &)
  args:
    executable: /bin/bash
  become: yes
  become_user: "{{ oph_user }}"

#######################################################
# Tasks for firewall
- name: Enable ports on firewalld
  firewalld:
    port: "443/tcp"
    zone: public
    permanent: true
    state: enabled
    
- name: Start firewalld
  service: name=firewalld state=started enabled=yes

- name: Reload firewall rules
  shell: firewall-cmd --reload

#######################################################
# Tasks to configure JupyterHub
- name: Check jupyter password file
  stat: path=/root/jupyter_password
  register: jupyter_file

- name: Generate random password
  shell: echo `head /dev/urandom | tr -dc "A-Za-z0-9" | head -c 10 ; echo ''` > /root/jupyter_password
  when: jupyter_file.stat.exists == False

- name: Extract password from file
  command: cat /root/jupyter_password
  register: jupyter_passwd

- name: Store password into a variable
  vars:
     jupyter_pwd: "{{jupyter_passwd.stdout}}"
  debug: 
    msg: "{{jupyter_passwd.stdout}}"

- name: Copy template of 'jupyterhub_config' file
  template:
    src=jupyterhub_config.py.j2
    dest=/root/jupyterhub_config.py
    mode=0700

- name: Check Jupyter SSL cert
  stat: path=/root/server.crt
  register: jupytercert

- name: Create HTTP server SSL cert
  command: >
    openssl req
      -x509
      -nodes
      -days 730
      -newkey rsa:2048
      -passout pass:{{ cert_passwd }}
      -subj "/CN={{ public_server_ip }} "
      -keyout /root/server.key
      -out /root/server.crt
  args:
    creates: /root/server.crt
  when: jupytercert.stat.exists == False

# Task to start JupyterHub service
- name: Start JupyterHub
  shell: pgrep jupyterhub || (nohup /usr/local/bin/jupyterhub > jupyter.log 2>&1 &)
  args:
    executable: /bin/bash
    chdir: /root/

# Download ECAS notebooks in user home
- name: Download ECAS notebooks
  git: dest=/home/{{ oph_user}}/notebooks/ repo=https://github.com/ECAS-Lab/ecas-notebooks

